AndroidMainfest.xml:
====================
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.nerd" >
    <uses-sdk android:minSdkVersion="5" 
        android:targetSdkVersion="19"/>
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
    
    <application
        android:allowBackup="true"
        android:debuggable="true"
        android:icon="@drawable/ic_launcher"
        android:label="@string/app_name"
        android:theme="@style/AppTheme" >
        <activity
            android:name=".MainActivity"
            android:screenOrientation="portrait"
            android:label="@string/app_name" >
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
    </application>

</manifest>


MainActivity.java:
==================
package com.example.nerd;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;

import android.app.Activity;
import android.content.Context;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.os.Bundle;
import android.os.Environment;
import android.util.Log;
import android.widget.TextView;

import com.example.nerd.R;



public class MainActivity extends Activity implements SensorEventListener {
    /** Called when the activity is first created. */
    private SensorManager senSensorManager;
    private Sensor senAccelerometer;
    private long lastUpdate = 0;
    private float last_x, last_y, last_z;

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        senSensorManager = (SensorManager) getSystemService(Context.SENSOR_SERVICE);
        senAccelerometer = senSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
        senSensorManager.registerListener(this, senAccelerometer , SensorManager.SENSOR_DELAY_NORMAL);

/* *********************AVD testing******************************** */
//below six lines to be deleted as it is used only for testing in AVD
        TextView text = (TextView)findViewById(R.id.value_x);
        text.setText("00");
        text = (TextView)findViewById(R.id.value_y);
        text.setText("00");
        text = (TextView)findViewById(R.id.value_z);
        text.setText("00");
        
//below lines to be deleted as it is used to check write to external file
        
     // get the path to sdcard
        File sdcard = Environment.getExternalStorageDirectory();
        // to this path add a new directory path
        File dir = new File(sdcard.getAbsolutePath() + "/your-dir-name/");
        // create this directory if not already created
        dir.mkdir();
        // create the file in which we will write the contents
        File file = new File(dir, "My-File-Name.txt");
        try {
            FileOutputStream os = new FileOutputStream(file);
            String data = "This is the content of my file";
			os.write(data.getBytes());
	        os.close();
		} catch (IOException e) {
			Log.v("sTag", "Exception in write to external storage");
			e.printStackTrace();
		}
/* *********************AVD testing******************************** */
    }

    public static boolean canWriteOnExternalStorage() {
    	   // get the state of your external storage
    	   String state = Environment.getExternalStorageState();
    	   if (Environment.MEDIA_MOUNTED.equals(state)) {
    	    // if storage is mounted return true
    	      Log.v("sTag" , "Yes can write to external storage.");
    	      return true;
    	   }
    	   Log.v("sTag" , "NO cannot write to external storage.");
    	   return false;
    	}    
    
    public void onSensorChanged(SensorEvent sensorEvent) {
        Sensor mySensor = sensorEvent.sensor;

        if (mySensor.getType() == Sensor.TYPE_ACCELEROMETER) {
            float x = sensorEvent.values[0];
            float y = sensorEvent.values[1];
            float z = sensorEvent.values[2];

            long curTime = System.currentTimeMillis();

            if ((curTime - lastUpdate) > 100) {
                long diffTime = (curTime - lastUpdate);
                lastUpdate = curTime;

                float speed = Math.abs(x + y + z - last_x - last_y - last_z)/ diffTime * 10000;

                //if (speed > SHAKE_THRESHOLD) {
                    TextView text = (TextView)findViewById(R.id.value_x);
                    text.setText("00"+x);

                    text = (TextView)findViewById(R.id.value_y);
                    text.setText("00"+y);

                    text = (TextView)findViewById(R.id.value_z);
                    text.setText("00"+z);                    
                    //}

                last_x = x;
                last_y = y;
                last_z = z;
            }
        }
    }

    @Override
    public void onAccuracyChanged(Sensor sensor, int accuracy) {

    }

    protected void onPause() {
        super.onPause();
        senSensorManager.unregisterListener(this);
    }

    protected void onResume() {
        super.onResume();
        senSensorManager.registerListener(this, senAccelerometer, SensorManager.SENSOR_DELAY_NORMAL);
    }
}



menu_main.xml:
==============
<menu xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools" tools:context=".MainActivity">
    <item android:id="@+id/action_settings" android:title="@string/action_settings"
        android:orderInCategory="100" app:showAsAction="never" />
</menu>

activity_main.xml:
==================
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:orientation="vertical"
    android:layout_width="fill_parent"
    android:layout_height="fill_parent">

    <RelativeLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content">
        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:id="@+id/title_x"
            android:layout_alignParentLeft="true"
            android:textColor="@android:color/black"
            android:text="@string/title_x"/>

        <TextView
            android:id="@+id/value_x"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_toRightOf="@+id/title_x"
            android:paddingLeft="16dp"
            android:text="0000"
            android:textColor="@android:color/black" />
    </RelativeLayout>
        
    <RelativeLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content">
        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:id="@+id/title_y"
            android:layout_alignParentLeft="true"
            android:textColor="@android:color/black"
            android:text="@string/title_y"/>
        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_toRightOf="@+id/title_y"
            android:paddingLeft="16dp"
            android:id="@+id/value_y"
            android:text="0000"
            android:textColor="@android:color/black"/>
    </RelativeLayout>
        
    <RelativeLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content">
        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:id="@+id/title_z"
            android:layout_alignParentLeft="true"
            android:textColor="@android:color/black"
            android:text="@string/title_z"/>
        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:id="@+id/value_z"
            android:layout_toRightOf="@+id/title_z"
            android:paddingLeft="16dp"
            android:text="0000"
            android:textColor="@android:color/black"/>
    </RelativeLayout>
        
</LinearLayout>

strings.xml:
===========
<?xml version="1.0" encoding="utf-8"?>
<resources>

    <string name="app_name">NERD</string>
    <string name="action_settings">Settings</string>
    <string name="title_x">Change in X : </string>
    <string name="title_y">Change in Y : </string>
    <string name="title_z">Change in Z : </string>
    
</resources>
