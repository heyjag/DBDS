AndroidMainfest.xml:
====================
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.lenovo.nerd" >
    <uses-sdk android:minSdkVersion="5"
        android:targetSdkVersion="19"/>
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/>

    <application
        android:allowBackup="true"
        android:icon="@drawable/ic_launcher"
        android:label="@string/app_name"
        android:theme="@style/AppTheme" >
        <activity
            android:name=".MainActivity"
            android:screenOrientation="portrait"
            android:label="@string/app_name" >
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
    </application>

</manifest>


MainActivity.java:
==================
package com.example.lenovo.nerd;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Locale;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.location.Criteria;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.Bundle;
import android.os.Environment;
import android.provider.Settings;
import android.util.Log;
import android.widget.TextView;
import android.widget.Toast;

import com.example.lenovo.nerd.R;

public class MainActivity extends Activity implements SensorEventListener, LocationListener {
    /** Called when the activity is first created. */
    private SensorManager senSensorManager;
    private Sensor senAccelerometer;
    private long lastUpdate = 0;
    private float last_x, last_y, last_z;
    private FileOutputStream os;

    private final int BESTAVAILABLEPROVIDERCODE = 1;
    private final int BESTPROVIDERCODE = 2;
    LocationManager locationManager;
    Location loc;
    String bestProvider;
    String bestAvailableProvider;
    String provider;

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        senSensorManager = (SensorManager) getSystemService(Context.SENSOR_SERVICE);
        senAccelerometer = senSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
        senSensorManager.registerListener(this, senAccelerometer , SensorManager.SENSOR_DELAY_NORMAL);

        // get the path to sdcard
        File sdcard = Environment.getExternalStorageDirectory();
        // to this path add a new directory path
        File dir = new File(sdcard.getAbsolutePath() + "/NERD_FILES/");
        // create this directory if not already created
        dir.mkdir();
        // create the file in which we will write the contents
        long curTime = System.currentTimeMillis();
        File file = new File(dir, "File"+ curTime +".txt");

        try
        {
            os = new FileOutputStream(file);
        } catch (IOException e)
        {
            Log.v("sTag", "Exception in write to external storage");
            e.printStackTrace();
        }

        // set a Criteria specifying things you want from a particular Location Service
        Criteria criteria = new Criteria();
        criteria.setSpeedRequired(false);
        criteria.setAccuracy(Criteria.ACCURACY_FINE);
        criteria.setCostAllowed(true);
        criteria.setBearingAccuracy(Criteria.ACCURACY_HIGH);
        criteria.setAltitudeRequired(false);

        locationManager = (LocationManager) this.getSystemService(Context.LOCATION_SERVICE);
        // finding best provider without fulfilling the criteria
        bestProvider = locationManager.getBestProvider(criteria, false);
        // finding best provider which fulfills the criteria
        bestAvailableProvider = locationManager.getBestProvider(criteria, true);
        getProvider();
        requestLocation(provider);
    }

    public void requestLocation(String usedLocationService) {
        long updateTime = 0;
        float updateDistance = 0;
        // finding the current location
        locationManager.requestLocationUpdates(usedLocationService, updateTime, updateDistance, this);
    }

    public void getProvider()
    {
        //String toastMessage = null;
        if (bestProvider == null) {
            //toastMessage = "NO best Provider Found";
        } else if (bestAvailableProvider != null && bestAvailableProvider.equals(bestAvailableProvider)) {
            boolean enabled = locationManager.isProviderEnabled(bestAvailableProvider);
            if (!enabled) {
                Toast.makeText(this, " Please enable " + bestAvailableProvider + " to find your location", Toast.LENGTH_LONG).show();
                Intent mainIntent = new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS);
                startActivityForResult(mainIntent, BESTAVAILABLEPROVIDERCODE);
            } else {
                provider = bestAvailableProvider;
            }
            //toastMessage = bestAvailableProvider + " used for getting your current location";
        } else {
            boolean enabled = locationManager.isProviderEnabled(bestProvider);
            if (!enabled) {
                Toast.makeText(this, " Please enable " + bestProvider + " to find your location", Toast.LENGTH_LONG).show();
                Intent mainIntent = new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS);
                startActivityForResult(mainIntent, BESTPROVIDERCODE);
            } else {
                provider = bestProvider;
            }
            //toastMessage = bestProvider + " is used to get your current location";

        }
        //Toast.makeText(this, toastMessage, Toast.LENGTH_LONG).show();
    }

    @Override
    public void onLocationChanged(Location location) {
        loc=location;
        Log.d("Location Found", loc.getLatitude() + " " + loc.getLongitude());
    }

    @Override
    public void onStatusChanged(String s, int i, Bundle bundle) {
        //To change body of implemented methods use File | Settings | File Templates.
    }

    @Override
    public void onProviderEnabled(String s) {
        //To change body of implemented methods use File | Settings | File Templates.
    }

    @Override
    public void onProviderDisabled(String s) {
        //To change body of implemented methods use File | Settings | File Templates.
    }

    public void onDestroy()
    {
        try
        {
            os.close();
            Log.v("sTag", "File Closed");
        } catch (IOException e)
        {
            Log.v("sTag", "File not Closed");
            e.printStackTrace();
        }
        super.onDestroy();
    }

    public static boolean canWriteOnExternalStorage() {
        // get the state of your external storage
        String state = Environment.getExternalStorageState();
        if (Environment.MEDIA_MOUNTED.equals(state)) {
            // if storage is mounted return true
            Log.v("sTag" , "Yes can write to external storage.");
            return true;
        }
        Log.v("sTag" , "NO cannot write to external storage.");
        return false;
    }

    public void onSensorChanged(SensorEvent sensorEvent) {
        Sensor mySensor = sensorEvent.sensor;
        double lat = 0, lon = 0;

        if (mySensor.getType() == Sensor.TYPE_ACCELEROMETER) {
            float x = sensorEvent.values[0];
            float y = sensorEvent.values[1];
            float z = sensorEvent.values[2];

            long curTime = System.currentTimeMillis();

            if ((curTime - lastUpdate) > 1000) {
                lastUpdate = curTime;

                TextView text = (TextView)findViewById(R.id.value_x);
                text.setText("xx "+x);

                text = (TextView)findViewById(R.id.value_y);
                text.setText("yy "+y);

                text = (TextView)findViewById(R.id.value_z);
                text.setText("zz "+z);

                loc = locationManager.getLastKnownLocation(provider);

                text = (TextView)findViewById(R.id.value_gps);
                System.out.println(loc);
                if(loc!=null)
                {
                    lat=loc.getLatitude();
                    lon=loc.getLongitude();
                    text.setText("lat = " + lat + ", lon = " + lon);
                }
                else
                {
                    lat=0;
                    lon=0;
                    text.setText("gpsnull");
                    requestLocation(provider);
                }


                String data = "" + curTime + ", " + x + ", " + y + ", " + z + ", "
                              + lat + ", " + lon + "\n";
                try
                {
                    os.write(data.getBytes());
                } catch (IOException e)
                {
                    e.printStackTrace();
                }

                last_x = x;
                last_y = y;
                last_z = z;
            }
        }
    }

    @Override
    public void onAccuracyChanged(Sensor sensor, int accuracy) {

    }

    protected void onPause() {
        super.onPause();
        senSensorManager.unregisterListener(this);
    }

    protected void onResume() {
        super.onResume();
        senSensorManager.registerListener(this, senAccelerometer, SensorManager.SENSOR_DELAY_NORMAL);
    }
}


menu_main.xml:
==============
<menu xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools" tools:context=".MainActivity">
    <item android:id="@+id/action_settings" android:title="@string/action_settings"
        android:orderInCategory="100" app:showAsAction="never" />
</menu>

activity_main.xml:
==================
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:mstb="http://schemas.android.com/apk/res-auto"
    android:orientation="vertical"
    android:layout_width="fill_parent"
    android:layout_height="fill_parent">

    <View
        android:layout_width="fill_parent"
        android:layout_height="2dp"
        android:layout_alignParentRight="true"
        android:layout_marginTop="20dp"
        android:background="#ff9703" />

    <Switch
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:paddingLeft="16dp"
        android:text="Driving"
        android:textOn="Rash"
        android:textOff="Normal"
        android:showText="true"
        android:id="@+id/drivingSwitch"/>
    <View
        android:layout_width="fill_parent"
        android:layout_height="2dp"
        android:layout_alignParentRight="true"
        android:layout_marginTop="20dp"
        android:background="#ff9703" />

    <Switch
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:paddingLeft="16dp"
        android:text="Sudden Braking"
        android:textOn="Yes"
        android:textOff="No"
        android:showText="true"
        android:id="@+id/brakingSwitch"/>
    <View
        android:layout_width="fill_parent"
        android:layout_height="2dp"
        android:layout_alignParentRight="true"
        android:layout_marginTop="20dp"
        android:background="#ff9703" />

    <Switch
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:paddingLeft="16dp"
        android:text="Sudden Acceleration"
        android:textOn="Yes"
        android:textOff="No"
        android:showText="true"
        android:id="@+id/accelSwitch"/>
    <View
        android:layout_width="fill_parent"
        android:layout_height="2dp"
        android:layout_alignParentRight="true"
        android:layout_marginTop="20dp"
        android:background="#ff9703" />

    <RelativeLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content">
        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:id="@+id/title_turn"
            android:paddingLeft="16dp"
            android:text="Turn"
            android:gravity="bottom"
            android:textColor="@android:color/black"/>

        <RadioGroup
            android:layout_width="fill_parent"
            android:layout_height="wrap_content"
            android:layout_toRightOf="@+id/title_turn"
            android:orientation="horizontal">
            <RadioButton android:id="@+id/radio_leftTurn"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="@string/leftTurn"/>
            <RadioButton android:id="@+id/radio_straight"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="@string/Straight"/>
            <RadioButton android:id="@+id/radio_rightTurn"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="@string/rightTurn"/>
        </RadioGroup>
    </RelativeLayout>

    <View
        android:layout_width="fill_parent"
        android:layout_height="2dp"
        android:layout_alignParentRight="true"
        android:layout_marginTop="20dp"
        android:background="#ff9703" />

    <Switch
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Road Condition"
        android:textOn="Bad"
        android:textOff="Good"
        android:showText="true"
        android:id="@+id/roadSwitch"/>
    <View
        android:layout_width="fill_parent"
        android:layout_height="2dp"
        android:layout_alignParentRight="true"
        android:layout_marginTop="20dp"
        android:background="#ff9703" />

    <RelativeLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content">
        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:id="@+id/title_x"
            android:layout_alignParentLeft="true"
            android:textColor="@android:color/black"
            android:text="@string/title_x"/>

        <TextView
            android:id="@+id/value_x"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_toRightOf="@+id/title_x"
            android:paddingLeft="16dp"
            android:text="0000"
            android:textColor="@android:color/black" />
    </RelativeLayout>

    <RelativeLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content">
        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:id="@+id/title_y"
            android:layout_alignParentLeft="true"
            android:textColor="@android:color/black"
            android:text="@string/title_y"/>
        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_toRightOf="@+id/title_y"
            android:paddingLeft="16dp"
            android:id="@+id/value_y"
            android:text="0000"
            android:textColor="@android:color/black"/>
    </RelativeLayout>

    <RelativeLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content">
        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:id="@+id/title_z"
            android:layout_alignParentLeft="true"
            android:textColor="@android:color/black"
            android:text="@string/title_z"/>
        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:id="@+id/value_z"
            android:layout_toRightOf="@+id/title_z"
            android:paddingLeft="16dp"
            android:text="0000"
            android:textColor="@android:color/black"/>
    </RelativeLayout>

    <View
        android:layout_width="fill_parent"
        android:layout_height="2dp"
        android:layout_alignParentRight="true"
        android:layout_marginTop="20dp"
        android:background="#ff9703" />

    <RelativeLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content">
        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:id="@+id/title_gps"
            android:layout_alignParentLeft="true"
            android:textColor="@android:color/black"
            android:text="@string/title_gps"/>

        <TextView
            android:id="@+id/value_gps"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_toRightOf="@+id/title_gps"
            android:paddingLeft="16dp"
            android:text="0000"
            android:textColor="@android:color/black" />
    </RelativeLayout>

</LinearLayout>


strings.xml:
===========
<?xml version="1.0" encoding="utf-8"?>
<resources>

    <string name="app_name">NERD</string>
    <string name="action_settings">Settings</string>
    <string name="title_x">Change in X : </string>
    <string name="title_y">Change in Y : </string>
    <string name="title_z">Change in Z : </string>
    <string name="title_gps">GPS co-ord : </string>
    <string name="leftTurn">Left</string>
    <string name="Straight">Straight</string>
    <string name="rightTurn">Right</string>

</resources>
